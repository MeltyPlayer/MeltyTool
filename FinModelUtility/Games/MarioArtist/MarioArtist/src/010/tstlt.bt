//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

local uint COLOR_IMAGE = 0x0000ff;
local uint COLOR_COUNT = 0x00ff00;
local uint COLOR_OFFSET = 0xff0000;
local uint COLOR_HEADER = 0xffffff;
local uint COLOR_SECTION0 = 0xffff00;
local uint COLOR_SECTION1 = 0xff00ff;
local uint COLOR_SECTION2 = 0x880088;

short thumbnail[24 * 24] <bgcolor=COLOR_IMAGE>;

uint CeilAlign(uint x, uint align) {
    float fraction = (x / (1f * align))
}

typedef struct {
  uint unk0;
  uint unk1;
  uint magic[2];
  
  uint unk2;
  uint fileSize <bgcolor=COLOR_COUNT>;
  uint unk3;
  uint unk4;

  uint unk5;
  uint unk6;
  uint unk7;
  uint unk8;
} Header <bgcolor=COLOR_HEADER>;

Header header;

short faceImages[128 * 141] <bgcolor=COLOR_IMAGE>;

typedef struct {
  uint unkCount0 <bgcolor=COLOR_COUNT>;
  uint unkCount1 <bgcolor=COLOR_COUNT>;   
} AnotherHeader;

AnotherHeader anotherHeader;

FSeek(0x16680);

typedef struct {
  string name;
} Bio;

Bio bio;

typedef struct {
  local uint baseOffset = FTell();
    
  ubyte unkByte0[4];
  uint totalSize <bgcolor=COLOR_COUNT>;

  uint imageSectionSize <bgcolor=COLOR_COUNT>;
  uint vertexSectionSize <bgcolor=COLOR_COUNT>;
  uint opcodeSectionSize <bgcolor=COLOR_COUNT>;
  uint section2Size <bgcolor=COLOR_COUNT>;
   
  ubyte unkByte1[4 * 1];
  
  uint imageSectionOffset <bgcolor=COLOR_OFFSET>;
  uint vertexSectionOffset <bgcolor=COLOR_OFFSET>;
  uint opcodeSectionOffset <bgcolor=COLOR_OFFSET>;
  uint section2Offset <bgcolor=COLOR_OFFSET>;

  ubyte unkByte2[4 * 3];
  
  ushort imageCount <bgcolor=COLOR_COUNT>;
  ushort vertexCount <bgcolor=COLOR_COUNT>;
  ushort unkCount <bgcolor=COLOR_COUNT>;
  ushort triangleCount <bgcolor=COLOR_COUNT>;
  
  short unk2[6];

  ubyte unkByte4[4 * 5];
  
  byte imageSectionData[imageSectionSize] <bgcolor=COLOR_IMAGE>;
  
  uint vertices[4 * vertexCount] <bgcolor=COLOR_SECTION0>;

  // The bulk of the logic is here...
  // - Fast3DEX2 opcodes
  // - Handles texture setup (width/format/clamp are defined here)
  // - Handles calling child display lists at their offset in RAM (how to get that from a file???)
  byte opcodeSectionData[opcodeSectionSize] <bgcolor=COLOR_SECTION1>;

  // No idea what this is, but its size seems to always be a multiple of 0xc.
  byte unkValue2s[section2Size] <bgcolor=COLOR_SECTION2>;
  
  FSeek(baseOffset + 
} Mesh <bgcolor=COLOR_HEADER>;

typedef struct {
  byte UnkHeader[0xf0] <bgcolor=COLOR_HEADER>;
  
  short images[32 * 32 * 8] <bgcolor=COLOR_IMAGE>;
  
  Mesh mesh;
} MeshGroup;

// Or maybe this starts at 0x16770?
FSeek(0x16680);
MeshGroup meshGroup;

// Offsets are for Alphys file

/*FSeek(0x1a770);
Mesh mesh;

FSeek(0x1E240);
Mesh mesh;

FSeek(0x1eca0);
Mesh mesh;

FSeek(0x1f700);
Mesh mesh;

FSeek(0x1fd70);
Mesh mesh;

FSeek(0x202e0);
Mesh mesh;

FSeek(0x28860);
Mesh mesh;

FSeek(0x295d0);
Mesh mesh;

FSeek(0x2b120);
Mesh mesh16x16;

FSeek(0x2b380);
Mesh mesh;

FSeek(0x2c850);
Mesh mesh;

FSeek(0x2d460);
Mesh mesh16x16;

FSeek(0x2d680);
Mesh mesh;

FSeek(0x2e280);
Mesh mesh16x16;

FSeek(0x2e4c0);
Mesh mesh;

FSeek(0x2ece0);
Mesh mesh;

FSeek(0x2f440);
Mesh mesh;

FSeek(0x2fa70);
Mesh mesh;

FSeek(0x30270);
Mesh mesh16x16;

FSeek(0x30470);
Mesh mesh;

FSeek(0x317c0);
Mesh mesh;

FSeek(0x322c0);
Mesh mesh16x16;

FSeek(0x324d0);
Mesh mesh;

FSeek(0x33340);
Mesh mesh16x16;

FSeek(0x33580);
Mesh mesh;

FSeek(0x34140);
Mesh mesh;

FSeek(0x349a0);
Mesh mesh;

FSeek(0x35230);
Mesh mesh;

FSeek(0x35b00);
Mesh mesh;

FSeek(0x361e0);
Mesh mesh;

FSeek(0x36420);
Mesh mesh;

FSeek(0x36f70);
Mesh mesh;

FSeek(0x37b60);
Mesh mesh;

FSeek(0x38610);
Mesh mesh;

FSeek(0x390a0);
Mesh mesh;

FSeek(0x39b00);
Mesh mesh;*/